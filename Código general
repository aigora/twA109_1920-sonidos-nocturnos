#include <stdio.h>
#include <windows.h>
#include<conio.h>
#include<stdlib.h>
#include <list>
using namespace std;

//en un principio ibamos a poner enemigos fijos, que bajasen cada x tiempo una fila, pero se hacía muy complicado compaginarlo con las funciones que hicimos cada uno por separado
//por este motivo, decidimos rehacer el proyecto partiendo de la funcion de movimiento de nuestra propia nave, que ya la habíamos hecho. Ahora los enemigos caen rápidamente por pantalla

void gotoxy (int x,int y) //con la funcion gotoxy establecemos unas coordenadas introducidas por nosotros
{
	HANDLE hCon;
	hCon = GetStdHandle (STD_OUTPUT_HANDLE);
	
	COORD dwPos; //estructura coordenada
	dwPos.X=x;
	dwPos.Y=y;
	

	SetConsoleCursorPosition (hCon,dwPos);	
}

void OcultarCursor()//con esto quitamos el molesto cursor que espera letras a introducir
{
	HANDLE hCon;
	hCon = GetStdHandle (STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO cci;	//estructura del cursor
	cci.dwSize=50;
	cci.bVisible=FALSE;
		
	SetConsoleCursorInfo(hCon,&cci);
}

void pintar_limites (){
	for(int i = 2 ; i<78 ; i++) {
		gotoxy (i,3); printf ("%c", 205);
		gotoxy (i,33); printf ("%c",205);
	

	}
	
	for(int i=4 ; i< 33; i++){
		gotoxy (2,i); printf ("%c",186);
		gotoxy (77,i); printf ("%c",186);
	}
	
	gotoxy (2,3); printf("%c",201);
	gotoxy (2,33); printf("%c",200);
	gotoxy (77,3); printf("%c",187);
	gotoxy (77,33); printf("%c",188);	


	
}


class NAVE{
    int x,y;
    int corazones;
    int vidas;
public:
    NAVE(int _x, int _y , int _corazones, int _vidas ): x( _x), y(_y), corazones(_corazones), vidas(_vidas){}
    int X()
        {return x;}
        
    int Y()
        {return y;}
    int VIDAS() {return vidas;}    
    void CORAZON() {corazones--;}
    void pintar();
    void borrar();
    void mover();
    void pintar_corazones ();
    void morir();//se crea funcion
};


void NAVE::pintar()
{
	gotoxy(x,y); printf  ("  A  ");
	gotoxy(x,y+1); printf(" wHw ");
	gotoxy(x,y+2); printf("WWHWW");	
}

void NAVE::borrar()//para que la nave no deje una estela 
{
	gotoxy(x,y); printf  ("     ");
	gotoxy(x,y+1); printf("     ");
	gotoxy(x,y+2); printf("     ");
	
	
}

void NAVE::mover(){  //aqui se repara el código para que la nave no sobrepase los limites
    if (kbhit()){
    
    char tecla = getch();
                borrar();
                if((tecla=='a'or tecla=='A' && x>3)and x> 3)x--;
			if((tecla=='d'or tecla=='D' && x+6 < 77)and x+6 < 77)x++;
			if (tecla == 'e')corazones--;
                pintar();
                pintar_corazones ();
              
            }
}

void NAVE::pintar_corazones (){
	
	
	gotoxy(50,2);printf("VIDAS %d",vidas);
	gotoxy(64,2); printf("Salud");
	gotoxy(70,2); printf("      ");
	for (int i=0; i< corazones; i++){
		
		gotoxy (70+i,2); printf ("%c",38);
	}
}
void NAVE::morir(){
	
	if(corazones==0)
	{
		borrar();
		gotoxy(x,y); printf  ("     ");
		gotoxy(x,y+1); printf("  *  ");
		gotoxy(x,y+2); printf("     ");
		Sleep(200);
		
		borrar();
		gotoxy(x,y); printf  ("  *  ");
		gotoxy(x,y+1); printf(" * * ");
		gotoxy(x,y+2); printf("* * *");
		Sleep(200);	
		borrar();
		
		vidas--;
		corazones = 3;
		pintar_corazones();
		pintar();
		
	}
	
	
	
}

class MALOS{
	int x,y;
public:
	MALOS(int _x,int _y):x(_x),y(_y){}
	void pintar();
	void mover();
	void colision(class NAVE &USER);
	int X () {return x;}
	int Y () {return y;}
};

void MALOS::pintar(){
	gotoxy(x,y); printf("v");
		
}
void MALOS::mover(){
	gotoxy(x,y); printf(" ");
	y++;
	if(y>32){
		x=rand()%71 + 4;
		y=4;
		
	}
	pintar();
}

void MALOS::colision(class NAVE &USER){
    if (x >= USER.X() && x <= USER.X()+5 && y >= USER.Y() && y <= USER.Y()+2)  //Comprobamos si las coordenadas del enemigo son las mismas que las de la nave
    {
        USER.CORAZON();
        USER.pintar(); //Para que no se borre parte de la nave cuando choca con un enemigo
        
        x=rand()%71 + 4;//El enemigo vuelve a salir por arriba
		y=4;
		
         }

}


class BALA{
	int x,y;
public:
		BALA (int _x , int _y) : x(_x), y(_y) {}
	    int X(){return x;}
        
    	int Y() {return y;}	
		void mover ();
		bool fuera();
};

void BALA::mover () {
	gotoxy(x,y); printf ("  ");
	if (y > 4) y--;
	gotoxy (x,y); printf ("*");
}

bool BALA::fuera(){
	
	if (y==4) return true;
	return false;
}

int main()
{
	OcultarCursor();
	pintar_limites ();
	NAVE USER(30,30,3,3);
	USER.pintar();
	USER.pintar_corazones ();
    
	list<MALOS*>M;//Creamos los enemigos que van a ir cayendo
	list<MALOS*>::iterator itM;
	for(int i=0;i<5;i++){
		
		M.push_back(new MALOS(rand()%75 + 3, rand()%5 + 4));
	}
	
	
	list<BALA*> B;
	list<BALA*>::iterator it;
	
	// introduzco ahora variable logica para que la funcion de movimiento
	//se ejecute hasta que muramos
	bool game_over = false;
	int puntos = 0; //Variable donde se va a guardar la puntuación
	while(!game_over)
	{	
	
	  gotoxy(4,2); printf("Puntos %d",puntos); //Imprimimos la puntuación del usuario
	//se establecen los comandos para disparar
	if(kbhit())
	{
	/*	char tecla = getch();
		if (tecla == 'w')
		B.push_back (new BALA(USER.X () + 2, USER.Y () - 1));
		*/
		
	if(kbhit())
            {
                if(GetAsyncKeyState(0X20))  // 0X20 ES LA BARRA ESPACIADORA
                       B.push_back(new BALA(USER.X()+2, USER.Y()-1));
            }
	}
	
	for (it = B.begin(); it != B.end(); it++)
	{
		(*it)->mover();
		if ((*it)->fuera())
		{
			gotoxy((*it)->X(),(*it)->Y());printf(" ");//quitamos las balas que se quedaban pegadas en el techo
			delete (*it);
			it = B.erase(it);
			
		}
	}
	
	for (itM=M.begin() ; itM!=M.end() ; itM++) {
		(*itM)->mover();
		(*itM)->colision(USER);	
		
		
	}	
    for (itM=M.begin() ; itM!=M.end() ; itM++)
    {
        for (it = B.begin(); it != B.end(); it++)
        {
            if ((*itM)->X() == (*it)-> X() && (*itM)->Y() +1 == (*it)->Y() || (*it)-> X() && (*itM)->Y() == (*it)->Y()) //Si colisonan bala y enemigo
            {
                gotoxy ((*it)->X(), (*it)->Y()); printf (" "); //Borramos la bala
                delete (*it); //Borramos el iterador de la bala que colisionó
                it = B.erase(it);
                
                M.push_back(new MALOS(rand()%74 + 3, 4)); //Ponemos el nuevo enemigo
                gotoxy ((*itM)->X(), (*itM)->Y()); printf (" ");  //Borramos al enemigo
                delete(*itM);
                itM = M.erase(itM);
                
                puntos+=50; //Cada vez que hay una colisión (matamos a un enemigo) nos da 50 ptos
            }
        }
    }
        if (USER.VIDAS() == 0) game_over = true;
	    USER.morir();
        USER.mover();
      
        Sleep(40);
	
		
	}
     
	system ("cls");
	gotoxy (32,20); printf ("GAME OVER\n");
	system ("PAUSE");
	return 0;
}
